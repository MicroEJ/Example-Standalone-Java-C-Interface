/* 
 * Copyright 2012 IS2T. All rights reserved.
 * Modification and distribution is permitted under certain conditions.
 * IS2T PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
/* 
 * AUTOGENERATED by COMP-ICETEA-ARMCC-ARM - 1.0.0 - DO NOT EDIT IT
 */
/* 
 * Implementation header file. Shall only be included by client implementation C files.
 */
#include <stdint.h>
#include <intern/LLINPUT_impl.h>
// --------------------------------------------------------------------------------
// -                      Functions that must be implemented                      -
// --------------------------------------------------------------------------------

/**
 * Called by the input stack at startup to initialize all input devices.
 * @return 1 when the input devices have been successfully initialized
 */
uint8_t LLINPUT_IMPL_initialize(void);

/**
 * Called by the input stack at startup to get the initial state of the given state
 * machine. Only called if a <code>&lt;states&gt;</code> event generator is defined
 * in the static microui initializer xml file.<br>
 * A states is a group of state machines. At any time state machine keeps a state.<br>
 * Each state machine has a 0-based ID: first state machine the ID 0, next state machine
 * the ID 1 etc.<br>
 * @param stateMachinesID the state machines group ID 
 * @param stateID the state machine ID in the state machines group
 * @return the initial state machine state
 */
int32_t LLINPUT_IMPL_getInitialStateValue(int32_t stateMachinesID, int32_t stateID);

/**
 * Called by the input stack before entering in a critical section.<br>
 * During the critical section no events must be added to the input queue.
 * Therefore, the LLINPUT_sendXXXEvent functions must not be called.<br>
 * There are several ways to implement the enterCriticalSection method:
 * <ul>
 * <li>When all events are added to the input stack by OS task(s),
 * the method must ensure that the current task is not pre-empted by
 * another task during the critical section.
 * </li>
 * <li>When some or all events are added to the input stack by interrupt
 * routine(s), the method has to disable all interrupts that could generate
 * inputs, and, if an interrupt is not currently being processed, ensure
 * that the current task is not pre-empted by another task during the
 * critical section.
 * </li>
 * </ul>
 * Note that this function will never be called twice without an interleaving
 * call to <code>LLINPUT_IMPL_leaveCriticalSection</code>. Therefore the
 * implementation does not need to support nested critical sections.
 */
void LLINPUT_IMPL_enterCriticalSection(void);

/**
 * Called by the input stack when exiting from a critical section.
 * @see LLINPUT_enterCriticalSection
 */
void LLINPUT_IMPL_leaveCriticalSection(void);
