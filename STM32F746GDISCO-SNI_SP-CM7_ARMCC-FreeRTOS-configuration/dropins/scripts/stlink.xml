<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	Copyright 2013-2016 IS2T. All rights reserved.	
	Program and run a MicroEJ application in internal Flash using ST-LINK_CLI.exe
	
	Input property:
		see workbench documentation	
-->

<project name="STlink" default="deploy">

	<dirname file="${ant.file.STlink}" property="ant.file.STlink.dir"/>
	
	<property name="stlink.name" value="ST-LINK/V2"/>
	<condition property="stlink.programming.output.line" value="enabling 32-bit flash writes">
		<os family="mac" />
	</condition>
	<property name="stlink.programming.output.line" value="Programming Complete."/>
	<property name="stlink.option.dir" location="C:/Program Files (x86)/STMicroelectronics/STM32 ST-LINK Utility/ST-LINK Utility"/>
	<property name="stlink.option.flasherase" value="false"/>
	
	<import file="${ant.file.STlink.dir}/deployToolCore.xml"/>
	
	<target name="stlink/check">
		<fail unless="stlink.binary.file" message="Please set stlink.binary.file property."/>
	</target>
	
	<target name="stlink/setup">
		<!-- Properties that could be overriden (specific to STM32XXGEVAL boards) -->
		<property name="stlink.binary.address" value="0x08000000"/>
		<property name="stlink.ext.loader" value=""/>
		<property name="stlink.option.jtag" value="SWD UR Hrst" description="[JTAG/SWD] [UR]"/>
		<property name="stlink.option.id" value="0" description="[ID]: ID of ST-LINK[0..9] to use when multiple probes are connected to the host "/>
		<condition property="stlink.arg.line" 
			value="--reset write '${stlink.binary.file}' ${stlink.binary.address}" 
		>
			<os family="mac" />
		</condition>
		<condition property="stlink.arg.line" 
			value="-c ${stlink.option.id} ${stlink.option.jtag} -P '${stlink.binary.file}' ${stlink.binary.address}" 
			else="-c ${stlink.option.id} ${stlink.option.jtag} -P '${stlink.binary.file}' ${stlink.binary.address} -EL &quot;${stlink.ext.loader}&quot;"
		>
			<equals arg1="${stlink.ext.loader}" arg2=""/>
		</condition>
		<condition property="stlink.flash.msg" value="Internal flash programming..." else="External flash programming...">
			<equals arg1="${stlink.ext.loader}" arg2=""/>
		</condition>
		<set.stlink.executable/>
	</target>
	
	<target name="stlink/flash/init" if="${stlink.option.flasherase}">
		<echo message="Internal flash erasing..."/>
		<!-- Erase internal flash -->
		<exec executable="${stlink.exe}">
			<arg line="-c ${stlink.option.id} ${stlink.option.jtag} -ME"/>
			<redirector  
				outputproperty="redirector.erase.out"
				errorproperty="redirector.erase.err"
			 >
				<outputmapper type="merge" to="redirector.erase.out"/>
				<errormapper type="merge" to="redirector.erase.err"/>
			</redirector>
		</exec>
		<echo message="Internal flash erase finished."/>
	</target>
	
	<target name="stlink/flash" extensionOf="flash" depends="stlink/check, stlink/setup, stlink/flash/init">
		<echo message="${stlink.flash.msg}"/>
		<parallel threadCount='2'>
			<!-- task 1: print some points -->
			<antcall target="print.points"/>
			
			<!-- task 2: programming -->
			<sequential>
				<chmod file="${stlink.exe}" perm="ugo+x"/>
				<exec executable="${stlink.exe}">
					<arg line="${stlink.arg.line}"/>
					<redirector  
						outputproperty="redirector.out"
						errorproperty="redirector.err"
					 >
						<outputmapper type="merge" to="redirector.out"/>
						<errormapper type="merge" to="redirector.err"/>
					</redirector>
				</exec>
				<!-- programming done (may be failed): create waiting file -->
				<touch file="${programming.waiting.file}" verbose="false"/>
			</sequential>
		</parallel>	
	</target>
	
	<target name="stlink/flash/checks" extensionOf="flash/checks">
		<!-- check if an error has occured during programming -->
		<condition property="stlink.error" value="true">
			<not>
				<contains 
					casesensitive="false"
					string="${redirector.out}"
					substring="${stlink.programming.output.line}"
				/>
			</not>
		</condition>
		<antcall target="stlink.programming.error"/>
		
		<!-- remove useless temporary file -->
		<delete file="${programming.waiting.file}" verbose="false"/>
	</target>
	
	<target name="stlink/reset" extensionOf="reset">
		<!-- launch proxy and reset the board -->
		<exec executable="${stlink.exe}">
			<arg line="-c ${stlink.option.id} ${stlink.option.jtag} -RUN"/>
			<redirector  
				outputproperty="redirector.out"
				errorproperty="redirector.err"
			 >
				<outputmapper type="merge" to="redirector.out"/>
				<errormapper type="merge" to="redirector.err"/>
			</redirector>
		</exec>
	</target>
	
	<macrodef name="set.stlink.executable">
		<attribute name="attr.stlink.dir" default="${stlink.option.dir}"/>
		<attribute name="attr.stlink.name" default="ST-LINK_CLI.exe"/>
		<attribute name="attr.stlink.subdir" default="ST-LINK Utility"/>
	
		<sequential>

			<!-- default executable is in user option dir -->
			<condition property="stlink.exe" value="@{attr.stlink.dir}/st-flash">
				<os family="mac" />
			</condition>
			
			<!-- default executable is in user option dir -->
			<condition property="stlink.exe" value="@{attr.stlink.dir}/@{attr.stlink.name}">
				<available file="@{attr.stlink.dir}/@{attr.stlink.name}"/>
			</condition>

			<!-- if not, try to go in sub dir -->
			<condition property="stlink.exe" value="@{attr.stlink.dir}/@{attr.stlink.subdir}/@{attr.stlink.name}">
				<available file="@{attr.stlink.dir}/@{attr.stlink.subdir}/@{attr.stlink.name}"/>
			</condition>
			
			<!-- check if property has been set -->
			<antcall target="stlink.invalid.dir">
				<param name="attr.stlink.dir" value="@{attr.stlink.dir}"/>
			</antcall>
		</sequential>
	</macrodef>
	
	<target name="print.points">
		<waitfor checkevery="1" checkeveryunit="second" maxwait="10" maxwaitunit="second">
			<available file="${programming.waiting.file}"/>
		</waitfor>
		<condition property="print.points.stop" value="true">
			<available file="${programming.waiting.file}"/>
		</condition>
		<antcall target="print.points.continue"/>
	</target>
	
	<target name="print.points.continue" unless="print.points.stop">
		<echo message=".....................................
"/>
		<antcall target="print.points"/>
	</target>
	
	<target name="stlink.invalid.dir" unless="stlink.exe">
		<echo message="ST-LINK Utility directory (${attr.stlink.dir})is invalid."/>
		<echo message="Please set a valid directory."/>
		<fail message="See previous error message."/>
	</target>
	
	<target name="stlink.programming.error" if="stlink.error">
		<echo message="${redirector.out}" level="error"/>
		<fail message="See previous error message."/>
	</target>
	
</project>